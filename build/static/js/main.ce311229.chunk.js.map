{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","expiresIn","SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","search","bind","assertThisInitialized","handleTermChange","onSearch","state","term","event","setState","target","value","react_default","a","createElement","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","renderAction","isRemoval","onAdd","track","onRemove","name","artist","album","TrackList","tracks","map","Components_Track_Track","key","id","SearchResults","Components_TrackList_TrackList","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","window","location","href","match","setTimeout","history","pushState","concat","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUri","length","userId","contentType","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","push","filter","_this2","trackUris","_this3","Components_SearchBar_SearchBar","Components_SearchResults_SearchResults","Components_Playlist_Playlist","Boolean","hostname","ReactDOM","render","Components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ce311229.chunk.js","sourcesContent":["const clientId = '954eb26203664908999295d1dbbae56b';\nconst redirectURI = 'isyazwan_app.surge.sh';\nlet accessToken;\nlet expiresIn;\nconst Spotify = {\n\n  getAccessToken(){\n    if (accessToken){\n      return accessToken;\n    }else if(window.location.href.match(/access_token=([^&]*)/) && window.location.href.match(/expires_in=([^&]*)/) )\n    {\n     accessToken = window.location.href.match(/access_token=([^&]*)/)[1];\n     expiresIn = window.location.href.match(/expires_in=([^&]*)/)[1];\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    }else{\n      window.location = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\n    }\n  },\n\n  search(term){\n    this.getAccessToken();\n\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,{\n      headers: {Authorization: `Bearer ${accessToken}`}\n    }).then(response => {\n        return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks){\n        return [];\n      }\n      return jsonResponse.tracks.items.map(track =>({\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        }))\n    });\n  },\n\n  savePlaylist(name, trackUri) {\n    this.getAccessToken();\n\n    if (!trackUri.length || !name){\n      return;\n    }\n\n    const headers = {Authorization: `Bearer ${accessToken}`};\n    var userId;\n    var playlistId;\n\n    return fetch (`https://api.spotify.com/v1/me`,{headers: headers})\n    .then(response => response.json())\n    .then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,{\n        headers: headers,\n        contentType: 'application/json',\n        method: 'POST',\n        body: JSON.stringify({name: name})\n      }).then(response => response.json()\n      ).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`,{\n          headers: headers,\n          contentType: 'application/json',\n          method: 'POST',\n          body: JSON.stringify({uris: trackUri})\n      });\n    });\n  });\n  }\n\n};\n\nexport default Spotify;\n","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component{\n  constructor(props){\n    super(props);\n    this.search = this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n  }\n\n  search(){\n    this.props.onSearch(this.state.term);\n  }\n\n  handleTermChange(event){\n    this.setState({term: event.target.value});\n  }\n\n  render(){\n    return(\n      <div className=\"SearchBar\">\n        <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange}/>\n        <a onClick={this.search}>SEARCH</a>\n      </div>\n    )\n  }\n};\n\nexport default SearchBar;\n","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n  constructor(props){\n    super(props);\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.renderAction = this.renderAction.bind(this);\n  }\n\n\n  renderAction(){\n    if(this.props.isRemoval){\n      return <a className=\"Track-action\" onClick={this.removeTrack}> - </a>;\n    }\n      return <a className=\"Track-action\" onClick={this.addTrack}> + </a>;\n  }\n\n  addTrack(){\n    this.props.onAdd(this.props.track);\n  }\n\n  removeTrack(){\n    this.props.onRemove(this.props.track);\n  }\n\n  render(){\n    return(\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p>{this.props.track.artist} | {this.props.track.album}</p>\n        </div>\n          {this.renderAction()}\n      </div>\n    )\n  }\n};\n\nexport default Track;\n","import React from 'react';\nimport Track from '../Track/Track';\nimport './TrackList.css';\n\nclass TrackList extends React.Component {\n  render(){\n    return(\n      <div className=\"TrackList\" >\n        {this.props.tracks.map(track =>\n            <Track\n              track={track}\n              key={track.id}\n              onAdd={this.props.onAdd}\n              onRemove={this.props.onRemove}\n              isRemoval={this.props.isRemoval}/>\n        )}\n      </div>\n    );\n  }\n};\n\nexport default TrackList;\n","import React from 'react';\nimport TrackList from '../TrackList/TrackList';\nimport './SearchResults.css';\n\nclass SearchResults extends React.Component {\n  render(){\n    return(\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} />\n      </div>\n    );\n  }\n};\n\nexport default SearchResults;\n","import React from 'react';\nimport TrackList from '../TrackList/TrackList';\nimport './Playlist.css';\n\nclass Playlist extends React.Component {\n  constructor(props){\n    super(props);\n    this.handleNameChange = this.handleNameChange.bind(this);\n  }\n\n  handleNameChange(event){\n    this.props.onNameChange(event.target.value)\n  }\n\n  render(){\n    return(\n      <div className=\"Playlist\">\n        <input defaultValue={\"New Playlist\"}\n               onChange={this.handleNameChange}/>\n        <TrackList tracks={this.props.playlistTracks}\n                   onRemove={this.props.onRemove}\n                   isRemoval={true}/>\n        <a className=\"Playlist-save\"\n          onClick={this.props.onSave}>SAVE TO SPOTIFY</a>\n      </div>\n    )\n  }\n};\n\nexport default Playlist;\n","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      searchResults:[],\n      playlistName: 'My Playlist',\n      playlistTracks: []\n    };\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    if(this.state.playlistTracks.find(tracks => tracks.id === track.id)){\n      return;\n    }\n    let tracks = this.state.playlistTracks;\n    tracks.push(track);\n      this.setState({playlistTracks: tracks});\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(tracks => tracks.id !== track.id);\n    this.setState({playlistTracks: tracks});\n  }\n\n  updatePlaylistName(event){\n    this.setState({playlistName: event})\n  }\n\n  savePlaylist(){\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n          playlistName: 'New Playlist',\n          playlistTracks: []\n        });\n    });\n\n  }\n\n  search(term){\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults});\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch = {this.search}/>\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults}\n                           onAdd={this.addTrack}/>\n            <Playlist playlistName={this.state.playlistName}\n                      playlistTracks={this.state.playlistTracks}\n                      onRemove = {this.removeTrack}\n                      onNameChange = {this.updatePlaylistName}\n                      onSave = {this.savePlaylist}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}